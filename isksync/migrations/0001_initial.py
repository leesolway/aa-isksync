# Generated by Django 4.2.23 on 2025-09-29 18:04

import datetime
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0012_alter_user_first_name_max_length'),
        ('groupmanagement', '0019_adding_restricted_to_groups'),
        ('eveuniverse', '0010_alter_eveindustryactivityduration_eve_type_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ObligationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name of the obligation type', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Description of what this obligation entails')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this obligation type is currently in use')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='OwnershipType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('code', models.CharField(help_text='Machine code', max_length=32, unique=True)),
                ('label', models.CharField(help_text='Human readable label', max_length=100)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['label'],
            },
        ),
        migrations.CreateModel(
            name='SystemOwnership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about system ownership')),
                ('discord_channel', models.CharField(blank=True, help_text='Discord channel name or ID for tax notifications', max_length=255)),
                ('tax_active', models.BooleanField(default=True, help_text='Whether tax collection is active for this system')),
                ('default_tax_amount_isk', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Default monthly rent amount in ISK used for new cycles', max_digits=20)),
                ('auth_group', models.ForeignKey(help_text='Alliance Auth group that contains users with access to this system', on_delete=django.db.models.deletion.CASCADE, to='groupmanagement.authgroup')),
                ('ownership_type', models.ForeignKey(help_text='Who controls the system', on_delete=django.db.models.deletion.PROTECT, related_name='system_ownerships', to='isksync.ownershiptype')),
                ('ping_groups', models.ManyToManyField(blank=True, help_text='Groups to be pinged in Discord notifications for this system', related_name='system_ownerships_for_ping', to='auth.group', verbose_name='ping groups')),
                ('primary_user', models.ForeignKey(blank=True, help_text='Primary user responsible for the system (must be a member of the auth group)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_systems', to=settings.AUTH_USER_MODEL)),
                ('system', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='eveuniverse.evesolarsystem')),
            ],
            options={
                'permissions': (('config_system_ownership', 'Can configure system ownership'), ('config_taxes', 'Can configure taxes'), ('view_isksync_dashboard', 'Can view ISKSYNC dashboard')),
            },
        ),
        migrations.CreateModel(
            name='TaxCycle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('due_date', models.DateField()),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PAID', 'Paid'), ('OVERDUE', 'Overdue'), ('WRITTEN_OFF', 'Written Off')], default='PENDING', max_length=15)),
                ('paid_date', models.DateField(blank=True, null=True)),
                ('paid_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Actual amount paid (may differ from target amount)', max_digits=20, null=True)),
                ('target_amount', models.DecimalField(decimal_places=2, help_text='Expected tax for this cycle', max_digits=20)),
                ('notes', models.TextField(blank=True, help_text='Notes about this tax cycle')),
                ('user_marked_paid', models.BooleanField(default=False, help_text="User toggled 'I have paid' (for managers to review)")),
                ('user_marked_paid_at', models.DateTimeField(blank=True, help_text='When the user last toggled to paid', null=True)),
                ('system_ownership', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tax_cycles', to='isksync.systemownership')),
            ],
            options={
                'ordering': ['-period_start'],
                'permissions': (('manage_tax_cycles', 'Can manage tax cycles and payments'),),
            },
        ),
        migrations.CreateModel(
            name='SystemObligationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this obligation is currently required for this system')),
                ('obligation_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='isksync.obligationtype')),
                ('system_ownership', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='obligation_types', to='isksync.systemownership')),
            ],
        ),
        migrations.CreateModel(
            name='DiscordNotificationLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notification_type', models.CharField(choices=[('BATCHED_ADVANCE', 'Batched Advance Notice'), ('BATCHED_DUE', 'Batched Due Date'), ('BATCHED_OVERDUE', 'Batched Overdue'), ('TEST_ADVANCE', 'Test Advance Notice'), ('TEST_DUE', 'Test Due Date'), ('TEST_OVERDUE', 'Test Overdue'), ('ADMIN_ADVANCE', 'Admin Advance Notice'), ('ADMIN_DUE', 'Admin Due Date'), ('ADMIN_OVERDUE', 'Admin Overdue')], max_length=20)),
                ('sent_date', models.DateField(default=datetime.date.today, help_text='Date this notification was sent')),
                ('webhook_url', models.URLField(help_text='Webhook URL used for this notification')),
                ('success', models.BooleanField(default=True, help_text='Whether the notification was sent successfully')),
                ('response_status', models.IntegerField(blank=True, help_text='HTTP response status from Discord', null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error message if notification failed')),
                ('tax_cycle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discord_notifications', to='isksync.taxcycle')),
            ],
            options={
                'ordering': ['-sent_date'],
            },
        ),
        migrations.CreateModel(
            name='DiscordNotificationConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(default='Default', help_text="Configuration name (usually 'Default' for single config)", max_length=100, unique=True)),
                ('webhook_base_url', models.URLField(help_text='Base Discord webhook URL (without channel-specific parts)')),
                ('webhook_url_template', models.CharField(default='{base_url}', help_text='Template for webhook URL. Use {base_url} and {channel} placeholders', max_length=500)),
                ('advance_notice_days', models.PositiveIntegerField(default=7, help_text='Days before due date to send advance notice')),
                ('role_mention_template', models.CharField(blank=True, default='@{channel}', help_text="Template for role mention (e.g., '@{channel}' -> '@farm-l')", max_length=255)),
                ('advance_severity', models.CharField(choices=[('LOW', 'Low - Info only'), ('MEDIUM', 'Medium - Warning'), ('HIGH', 'High - Critical')], default='MEDIUM', help_text='Severity for advance notice notifications', max_length=10)),
                ('due_severity', models.CharField(choices=[('LOW', 'Low - Info only'), ('MEDIUM', 'Medium - Warning'), ('HIGH', 'High - Critical')], default='HIGH', help_text='Severity for due date notifications', max_length=10)),
                ('overdue_severity', models.CharField(choices=[('LOW', 'Low - Info only'), ('MEDIUM', 'Medium - Warning'), ('HIGH', 'High - Critical')], default='HIGH', help_text='Severity for overdue notifications', max_length=10)),
                ('send_advance_notice', models.BooleanField(default=True, help_text='Send advance notice X days before due date')),
                ('send_due_notice', models.BooleanField(default=True, help_text='Send notification on due date')),
                ('send_overdue_notice', models.BooleanField(default=True, help_text='Send daily notifications when overdue')),
                ('is_active', models.BooleanField(default=True, help_text='Whether Discord notifications are enabled for this system')),
            ],
            options={
                'indexes': [models.Index(fields=['is_active'], name='isksync_dis_is_acti_9da2cd_idx'), models.Index(fields=['name'], name='isksync_dis_name_bae5c9_idx')],
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('action', models.CharField(max_length=50)),
                ('target_object_id', models.PositiveIntegerField()),
                ('target_repr', models.CharField(blank=True, help_text='Readable target summary at time of action', max_length=255)),
                ('details', models.JSONField(blank=True, default=dict, help_text='Optional structured metadata for the action')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('target_content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='isksync_audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TaxCycleObligation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', help_text='Current state of this obligation', max_length=15)),
                ('fulfilled_date', models.DateTimeField(blank=True, help_text='When the obligation was marked as fulfilled', null=True)),
                ('notes', models.TextField(blank=True, help_text='Notes about the obligation fulfillment')),
                ('fulfilled_by', models.ForeignKey(blank=True, help_text='User who marked this obligation as fulfilled', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fulfilled_obligations', to=settings.AUTH_USER_MODEL)),
                ('obligation_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='isksync.obligationtype')),
                ('tax_cycle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='obligations', to='isksync.taxcycle')),
            ],
            options={
                'indexes': [models.Index(fields=['fulfilled_date'], name='isksync_tax_fulfill_aa709f_idx'), models.Index(fields=['tax_cycle', 'status'], name='isksync_tax_tax_cyc_f439df_idx'), models.Index(fields=['status'], name='isksync_tax_status_f5da49_idx')],
                'unique_together': {('tax_cycle', 'obligation_type')},
            },
        ),
        migrations.AddIndex(
            model_name='taxcycle',
            index=models.Index(fields=['system_ownership', 'period_start'], name='isksync_tax_system__facc28_idx'),
        ),
        migrations.AddIndex(
            model_name='taxcycle',
            index=models.Index(fields=['due_date', 'status'], name='isksync_tax_due_dat_b6de4a_idx'),
        ),
        migrations.AddIndex(
            model_name='taxcycle',
            index=models.Index(fields=['status'], name='isksync_tax_status_44abc1_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='taxcycle',
            unique_together={('system_ownership', 'period_start')},
        ),
        migrations.AddIndex(
            model_name='systemownership',
            index=models.Index(fields=['ownership_type'], name='isksync_sys_ownersh_0ec15e_idx'),
        ),
        migrations.AddIndex(
            model_name='systemownership',
            index=models.Index(fields=['primary_user'], name='isksync_sys_primary_6a1a9a_idx'),
        ),
        migrations.AddIndex(
            model_name='systemownership',
            index=models.Index(fields=['discord_channel'], name='isksync_sys_discord_7a0742_idx'),
        ),
        migrations.AddIndex(
            model_name='systemownership',
            index=models.Index(fields=['auth_group'], name='isksync_sys_auth_gr_d730bf_idx'),
        ),
        migrations.AddIndex(
            model_name='systemownership',
            index=models.Index(fields=['tax_active'], name='isksync_sys_tax_act_fb834e_idx'),
        ),
        migrations.AddIndex(
            model_name='systemobligationtype',
            index=models.Index(fields=['system_ownership', 'is_active'], name='isksync_sys_system__fceb7c_idx'),
        ),
        migrations.AddIndex(
            model_name='systemobligationtype',
            index=models.Index(fields=['obligation_type'], name='isksync_sys_obligat_ebb149_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='systemobligationtype',
            unique_together={('system_ownership', 'obligation_type')},
        ),
        migrations.AddIndex(
            model_name='discordnotificationlog',
            index=models.Index(fields=['tax_cycle', 'notification_type'], name='isksync_dis_tax_cyc_f6ed42_idx'),
        ),
        migrations.AddIndex(
            model_name='discordnotificationlog',
            index=models.Index(fields=['sent_date'], name='isksync_dis_sent_da_0c6026_idx'),
        ),
        migrations.AddIndex(
            model_name='discordnotificationlog',
            index=models.Index(fields=['success'], name='isksync_dis_success_c78cb7_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['action'], name='isksync_aud_action_75d184_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['target_content_type', 'target_object_id'], name='isksync_aud_target__122b7d_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['created_at'], name='isksync_aud_created_2a55a2_idx'),
        ),
    ]
